<!DOCTYPE html>
<html>
<head>
    <title></title>
    <style type="text/css">
        form {
            display: grid;
            grid-gap: 7px;
            grid-template-columns: 120px 12px 300px 70px;
        }

            form > label {
                grid-column: 1;
            }

            form > select, form > input {
                grid-column: 2 / span 2;
            }

                form > select + button {
                    grid-column: 4;
                }

                form > input[type=checkbox] {
                    grid-column: 2;
                }

                    form > input[type=checkbox] + label {
                        grid-column: 3;
                    }

            form > hr {
                grid-column: 1 / span 4;
                width: 100%;
            }

            form > fieldset {
                grid-column: 1 / span 5;
                border: 0px;
                margin: 0px;
                padding: 0px;
                margin-top: 10px;
            }
    </style>
</head>
<body>
    @{
        // Page-wide variables & setup
        // A) Object to access the database
        var westWindDatabase = WebMatrix.Data.Database.Open("WestWindDb");
        // B) Captured any user input from submitting the form
        string selectedProductId = Request[nameof(selectedProductId)];
        string productName = Request[nameof(productName)];
        string supplierId = Request[nameof(supplierId)];
        string categoryId = Request[nameof(categoryId)];
        string qtyPerUnit = Request[nameof(qtyPerUnit)];
        string unitPrice = Request[nameof(unitPrice)];
        string onOrder = Request[nameof(onOrder)];
        string isDiscontinued = Request[nameof(isDiscontinued)];
        string submitAction = Request[nameof(submitAction)];
        // C) Specify validation requirements for this form
        //    NOTE: This is for server-side validation.
        // The Validation object is used to set up various kinds
        // of validation requirements for any user-input controls
        // on the form. This object can later be checked by our
        // code by calling Validation.IsValid()
        Validation.RequireField(nameof(productName), "You must supply a name for the product");
        Validation.RequireField(nameof(unitPrice), "You must supply a price per unit for the product");
        Validation.RequireField(nameof(qtyPerUnit), "Please identify the quantity & kind of item per unit");
        Validation.RequireField(nameof(onOrder), "Please supply an on-order value");
        Validation.Add(nameof(onOrder), Validator.Integer("On order quantity must be a whole number"));
        Validation.Add(nameof(onOrder), Validator.Range(0, int.MaxValue, "On order quantity cannot be negative"));
        Validation.Add(nameof(unitPrice), Validator.Range(0.01, double.MaxValue, "Unit prices have to be greater than zero"));
    }
    <div class="diagnostics">
        <!-- TODO: Put this in a Razor Helper -->
        <h4>Diagnostics</h4>
        <p>Before processing the post-back:</p>
        <div>
            Testing error reporting:
            @{
                try
                {
                    throw new NotImplementedException("Just testing the errors");
                }
                catch (Exception ex)
                {
                    @ReportError(ex);
                }
            }
        </div>
        <div>Processing the <b>@submitAction</b> Request</div>
        @selectedProductId
        @supplierId
        @categoryId
    </div>

    <h1>Manage Products</h1>
    <div>
        @if (IsPost)
        {
            // Process the form's post requests
            string sql;
            int count;
            Exception error;
            switch (submitAction)
            {
                case "Edit":
                    sql = "SELECT ProductName, SupplierID, CategoryID, UnitPrice, QuantityPerUnit, UnitsOnOrder, Discontinued FROM Products WHERE ProductID = @0";
                    var result = QueryDatabase(westWindDatabase, sql, true, selectedProductId);
                    // Check that I actually got something back
                    if (result == null)
                    {
                        submitAction = string.Empty; // for correct buttons
                        <div>Please select a product before clicking the Edit button.</div>
                    }
                    else
                    {
                        // Place the values inside the variables for the form's
                        // user input controls.
                        productName = result.ProductName;
                        supplierId = result.SupplierID.ToString();
                        categoryId = result.CategoryID.ToString();
                        unitPrice = result.UnitPrice.ToString();
                        qtyPerUnit = result.QuantityPerUnit;
                        onOrder = result.UnitsOnOrder.ToString();
                        // The ternary operator is a shorthand way
                        // of producing an expression that can give
                        // alternative values.
                        // The ternary operator has these parts:
                        //      booleanExpression ? valueIfTrue : valueIfFalse
                        isDiscontinued = result.Discontinued ? "on" : "";
                    }
                    break;
                case "Add":
                    if (Validation.IsValid())
                    {
                        sql = "INSERT INTO Products(ProductName, SupplierID, CategoryID, UnitPrice, QuantityPerUnit, UnitsOnOrder, Discontinued) VALUES(@0, @1, @2, @3, @4, @5, @6)";
                        error = Execute(westWindDatabase, out count, sql, productName, supplierId, categoryId, unitPrice, qtyPerUnit, onOrder,
                            !string.IsNullOrEmpty(isDiscontinued));
                        // TODO: Error processing - check the error result and the count
                        if (error is Exception)
                        {
                            @ReportError(error)
                        }
                        else if (count == 0)
                        {
                            <div>The add failed without an error.</div>
                        }
                        else
                        {
                            // After successful insert
                            // Note that I'm NOT using a query for the identity value.
                            // That's because having split the database call into
                            // two statements, the call to SCOPE_IDENTITY() returns null.
                            sql = "SELECT TOP(1) ProductID FROM Products WHERE ProductName = @0";
                            selectedProductId = westWindDatabase.QueryValue(sql, productName).ToString();
                        }
                    }
                    break;
                case "Update":
                    if (Validation.IsValid())
                    {
                        sql = "UPDATE Products SET ProductName = @0, SupplierID = @1, CategoryID = @2, UnitPrice = @3, QuantityPerUnit = @4, UnitsOnOrder = @5, Discontinued = @6 WHERE ProductID = @7";
                    }
                    break;
                case "Delete":
                    sql = "DELETE FROM Products WHERE ProductID = @0";
                    break;
                case "Clear":
                    const string dropDownDefault = "0";
                    selectedProductId = dropDownDefault; // default
                    productName = string.Empty;
                    supplierId = dropDownDefault;
                    categoryId = dropDownDefault;
                    unitPrice = string.Empty;
                    qtyPerUnit = string.Empty;
                    onOrder = string.Empty;
                    isDiscontinued = string.Empty;
                    break;
                default:
                    <text>Unknown post-back option: Cannot @submitAction your request.</text>
                    break;
            }
        }
        else
        {
            <text>Use this form to manage items in the Product catalog.</text>
        }
        @* NOTE: ValidationSummary() will only have content if there are errors *@
        @if (!Validation.IsValid() && submitAction == "Add" || submitAction == "Update")
        {
            @Html.ValidationSummary("Please correct the following errors and re-submit your form.")
        }
    </div>

    @{
        var products = QueryDatabase(westWindDatabase, "SELECT ProductID, ProductName FROM Products", false);
        if (products is Exception)
        {
            // I call the Razor helper with the @ symbol - that is to acknowledge that it can
            // output HTML content inside that method.
            @ReportError(products)
        }
        else
        {
            <form method="post">
                <label for="ProductsList">Products</label>
                <select name="@nameof(selectedProductId)" id="ProductsList">
                    <option value="">[Select a Product to Edit]</option>
                    @{
                        // var products = westWindDatabase.Query("SELECT ProductID, ProductName FROM Products");

                        foreach (var row in products)
                        {
                            <option value="@row.ProductID" selected="@(row.ProductID.ToString() == selectedProductId)">@row.ProductName</option>
                        }
                    }
                </select>
                <button type="submit" name="submitAction" value="Edit">Edit</button>
                <hr />

                <label for="ProductName">Name</label>
                <input type="text" name="@nameof(productName)" id="ProductName" value="@productName" />

                <label for="SuppliersList">Supplier</label>
                <select name="@nameof(supplierId)" id="SuppliersList">
                    <option value="">[Select a Supplier]</option>
                    @{
                        var suppliers = QueryDatabase(westWindDatabase, "SELECT SupplierID, CompanyName FROM Suppliers", false);
                        if (suppliers is Exception)
                        {
                            <option value="">[Suppliers unavailable]</option>
                        }
                        else
                        {
                            foreach (var row in suppliers)
                            {
                                <option value="@row.SupplierID" selected="@(row.SupplierID.ToString() == supplierId)">@row.CompanyName</option>
                            }
                        }
                    }
                </select>

                <label for="CategoriesList">Category</label>
                <select name="@nameof(categoryId)" id="CategoriesList">
                    <option value="">[Select a Category]</option>
                    @{
                        var categories = QueryDatabase(westWindDatabase, "SELECT CategoryID, CategoryName FROM Categories", false);
                        if (categories is Exception)
                        {
                            <option value="">[Categories unavailable]</option>
                        }
                        else
                        {
                            foreach (var row in categories)
                            {
                                <option value="@row.CategoryID" selected="@(row.CategoryID.ToString() == categoryId)">@row.CategoryName</option>
                            }
                        }
                    }
                </select>


                <label for="UnitPrice">Unit Price</label>
                <input type="text" name="@nameof(unitPrice)" id="UnitPrice" value="@unitPrice" />

                <label for="QtyPerUnit">Quantity Per Unit</label>
                <input type="text" name="@nameof(qtyPerUnit)" id="QtyPerUnit" value="@qtyPerUnit" />

                <label for="OnOrder">On Order</label>
                <input type="text" name="@nameof(onOrder)" id="OnOrder" value="@onOrder" />

                <label for="IsDiscontinued">Discontinued</label>
                <input type="checkbox" name="@nameof(isDiscontinued)" id="IsDiscontinued" checked="@isDiscontinued" />
                <label for="IsDiscontinued">Check if Discontinued</label>

                <fieldset>
                    @if (submitAction != "Edit")
                    {
                        <button type="submit" name="submitAction" value="Add">Add New Product</button>
                    }
                    else
                    {
                        <button type="submit" name="submitAction" value="Update">Update Product</button>
                        <button type="submit" name="submitAction" value="Delete">Remove From Catalog</button>
                    }
                    <button type="submit" name="submitAction" value="Clear">Clear Form</button>
                    <input type="reset" value="Reset Form" />
                </fieldset>
            </form>
        }
    }
</body>
</html>
@helper ReportError(Exception ex)
{
    // Helpers can render to the browser output.
    // Call this helper as follows:  @ReportError(err)
    if (ex != null)
    {
        string stackTrace = ex.StackTrace.Replace(" at ", "<br/>at ").Replace(" in ", "<br/>  in ");
        <div>
            There was a problem accessing the database: @ex.Message.
            <details>
                <summary>Stack Trace</summary>
                <pre>@Html.Raw(stackTrace)</pre>
            </details>
        </div>
    }
}


@functions {
    // Razor functions CAN NOT directly output/render to browser response.
    private Exception Execute(WebMatrix.Data.Database db, out int count, string sql, params object[] values)
    {
        count = 0;
        Exception result = null;
        try
        {
            count = db.Execute(sql, values);
        }
        catch (Exception ex)
        {
            result = ex;
        }
        return result;
    }

    private dynamic QueryDatabase(WebMatrix.Data.Database db, string query, bool querySingle, params object[] values)
    {
        dynamic result;
        try
        {
            if (querySingle)
            {
                result = db.QuerySingle(query, values);
            }
            else
            {
                result = db.Query(query, values);
            }
        }
        catch (Exception ex)
        {
            result = ex;
        }
        return result;
    }

}